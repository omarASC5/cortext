<%- include partials/header.ejs %>
<link rel="stylesheet" href="stylesheets/new.css">

		<div class="container">
				<% global.document = new JSDOM(html).window.document; %>
			<article class="p-4 my-5 pt-sm-4 px-sm-5 pb-sm-5 my-sm-5 pt-lg-4 px-lg-5 pb-lg-5 m-lg-5 context" id="art">
				<div class="text-center">
					<a href="#link-to-original" class="btn btn-md btn-outline-primary">Scroll to Overall Score</a>
				</div>
				<% const sentiment = new Sentiment() %>
				<!-- Title of the article. -->
				<h2 class="h3 text-left pt-3"><%=article.title%></h2>
		
				<!-- Time article was published. -->
				<p class="lead"><%=article.publishedTime%></p>
		
				<!-- Author of article -->
				<p class="lead"><%=article.author%></p>
		
				<!-- Source Website -->
				<p class="lead"><%=article.source%></p>
		
				<!-- Returns and displays an array of sentences run through Compromise.js -->
				<%	const textArray = (nlp(article.content).sentences().data()).map((index) => { %>
				<% 		return index.text %>
				<%		}); %>
		        <p id="yy"style="display:none"><%=textArray%></p> 

				

			     <!-- Article arranged by content. -->
				 <% let wordsScoreArray = []; %>
				 <% for (let i = 0; i < textArray.length; i++) { %>
					 <% const sentimentScoreSentence = sentiment.analyze(textArray[i]); %>
					 <% const wordsArray = sentimentScoreSentence.words; %>
 <!-- Replace wordsArray with allWords array -->
					 <% for (let j = 0; j < wordsArray.length; j++) { %>
						 <% textArray[i] = textArray[i].replace((new RegExp(wordsArray[j], 'gi')), "<mark>" +wordsArray[j]+ "</mark>"); %>
						 <% const scores = sentimentScoreSentence.score %>
							 <% wordsScoreArray.push(sentiment.analyze(wordsArray[j]).score) %>
						 <% } %>
						 <!-- Wo -->
						 <p class="highlight-text lead paragraph-styling">
							 <%= textArray[i] %>
						 </p>
					 <% } %>

				<u>
					<p id="overall-score" class="text-center h3 py-3"></p>
				</u>	 

			<span>
				<!-- URL of article. -->
				<div class="text-center">
					<a href="<%=article.url%>" id="link-to-original" target="_blank" class="btn btn-md btn-outline-primary">Link to Original Article</a>
				</div>

			</span>

			</article>


</div>
<script type="text/javascript" defer>
	// var wordsScoreArray = "<%=wordsScoreArray%>";
	// console.log(wordsScoreArray);
</script>
	
<script type="text/javascript">
	const textSpacing = document.getElementById('text');

	//Sets up the tool tip
	$(function () {
		$('[data-toggle="tooltip"]').tooltip();
	});
	
	//This funtion creates the Positive or negative words   
	function scoreThatCreatesToolTip(score) {
		score+=5;
		let output = {
			state: "",
			icon: "",
			score: score,
			color: ""
		};

		// comparees if the score is negative or positive
		if (score > 5) {
				output.state = "Positive";
				output.icon = "<i class='fas fa-thumbs-up text-success pt-3'></i>";
				output.color = "green-tool-tip";
		}  else {
				output.state = "Negative";
				output.icon = "<i class='fas fa-thumbs-down text-danger pt-3' style='color: red;'></i>";
				output.color = "red-tool-tip";
		}			
		return output;
	}

	// Overall thing at the end, is the averafe score above or below 5
	function overallScore(avg) {
		let output;
		if (avg > 5.5) {
			output = "Overall, the article shows a positive slant towards the subject matter.";
		} else if (avg < 4.5){
			output = "Overall, the article shows a negative slant towards the subject matter.";
		}
		else {
			output = "Overall, the article shows a neutral slant towards the subject matter.";
		}
		console.log(avg);
		return output;
	}


	const sent = document.body.getElementsByClassName('highlight-text');
	var wordsScoreArray = "<%=wordsScoreArray%>".split(',');
	let outputIcon = [];
	let outputPositiveOrNegativeText = [];
	let outputScore = [];
	let outputColor = [];

	

	//Fixes the mark tag issue
	for (let i = 0; i < sent.length; i++) {

		sent[i].innerHTML = sent[i].innerHTML.split('&lt;mark&gt;').join(`<mark class='highlight cOlor' data-toggle='tooltip' data-placement='bottom' data-html='true' title='<h1> nUm </h1> <h2>with</h2> <b>HTML</b>'>`);
		sent[i].innerHTML = sent[i].innerHTML.split('&lt;/mark&gt;').join('</mark>');	
	}

	//All of the words in the article that have been highlghted
    const wordsFromDom = document.body.getElementsByClassName('highlight'); 
    let allWords = [];
    for (let i = 0; i < wordsFromDom.length; i++) {
        allWords.push(wordsFromDom[i].innerText); //Shifts array from HTML to just all of the words
        //Use innerText instead of inner html
    }

    //This is a much larger bug, there is no wat to properly fix it, but we can scam it for now.
    //Fix? Words score array and use allwords
    allWords.sort(function(a, b) {

    if (wordsScoreArray.length == allWords.length){
            return
        }

    if (a == b){
             let i = allWords.indexOf(a);
             wordsScoreArray.splice(i,0,wordsScoreArray[i]);
        }
        
    });
    console.log(wordsScoreArray);
    console.log(allWords);

	//Creates three other arrays
		//One array with Icons in order.
		//One array with Positive or negative word
		//one array with score
	for (let j = 0; j < wordsScoreArray.length; j++) {
		let wordsScoreArray_int =  parseInt(wordsScoreArray[j]);
		outputIcon.push(scoreThatCreatesToolTip(wordsScoreArray_int).icon); 
		outputPositiveOrNegativeText.push(scoreThatCreatesToolTip(wordsScoreArray_int).state); 
		outputScore.push(scoreThatCreatesToolTip(wordsScoreArray_int).score);
		outputColor.push(scoreThatCreatesToolTip(wordsScoreArray_int).color);
	}

		
	//Puts in the tags with the image, text and score
	for (let i = 0; i < wordsFromDom.length; i++) {
		wordsFromDom[i].outerHTML = wordsFromDom[i].outerHTML.split('nUm').join(outputIcon[i]);
		wordsFromDom[i].outerHTML = wordsFromDom[i].outerHTML.split('with').join(outputPositiveOrNegativeText[i]);
		wordsFromDom[i].outerHTML = wordsFromDom[i].outerHTML.split('HTML').join(`Score: ${outputScore[i]}`);
		wordsFromDom[i].outerHTML = wordsFromDom[i].outerHTML.split('cOlor').join(outputColor[i]);
	}

	//Gets the total number from all of the words I think
	var total = 0;
	const wordsScoreArray_int =  (wordsScoreArray).map(function(x){return parseInt(x)});;
	for (let i = 0; i < wordsScoreArray_int.length; i++) {
		total += wordsScoreArray_int[i]+=5;
	}

	//All the way at the end Overall Summary
	var avg = total / wordsScoreArray_int.length;
	const overAllScoreParagraph = document.getElementById('overall-score');
	overAllScoreParagraph.innerHTML = overallScore(avg); //Returns if above or below 5.

</script>

<%- include partials/footer.ejs %>